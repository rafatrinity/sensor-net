@startuml GrowController Simplified Structure

' --- Configurações Visuais ---
skinparam linetype ortho
skinparam classAttributeIconSize 0
skinparam packageStyle rect
hide empty members
' top to bottom direction 
left to right direction 


' --- Pacotes representando Diretórios ---

package "main" <<Application>> {
    class main {
        + setup()
        + loop()
        ---
        ' Globais ou instâncias principais criadas/usadas
        - appConfig : AppConfig
        - targetManager : TargetDataManager
        - displayMgr : DisplayManager
        - mqttMgr : MqttManager
        ' sensorMgr e actuatorMgr são locais em setup, mas importantes na inicialização
    }
    note right of main
     Inicializa todos os managers,
     configurações e inicia as tasks.
     Conecta os diferentes módulos.
    end note
}

package "config" <<Configuration>> {
    class AppConfig {
     + wifi : WiFiConfig
     + mqtt : MQTTConfig
     + gpioControl : GPIOControlConfig
     + time : TimeConfig
     + sensor : SensorConfig
    }
    ' Detalhes das structs de config omitidos para clareza,
    ' mas AppConfig as agrupa.
    ' Exemplo: struct WiFiConfig
    note right of AppConfig : Agrega todas as\nconfigurações específicas\n(Pinos, MQTT, WiFi, Sensores...).
}

package "data" <<Data Management>> {
    class TargetDataManager {
        - dataMutex : SemaphoreHandle_t <<FreeRTOS>>
        ---
        + TargetDataManager()
        + ~TargetDataManager()
        + updateTargetsFromJson(JsonDocument) : bool
        + getTargetAirHumidity() : float
        + getLightOnTime() : struct tm
        + getLightOffTime() : struct tm
         ' ... outros getters ...
    }
    note left of TargetDataManager
     Armazena dados alvo (luz, umidade).
     Thread-safe via Mutex.
     Atualizado por MqttManager.
    end note
}

package "network" <<Communication>> {
    class MqttManager {
        - clientMutex : SemaphoreHandle_t <<FreeRTOS>>
        - taskHandle : TaskHandle_t <<FreeRTOS>>
        ---
        + MqttManager(MQTTConfig, TargetDataManager)
        + ~MqttManager()
        + setup()
        + publish(subTopic, ...) : bool
        {static} + taskRunner(void*) <<Task Entry>>
    }
    entity connectToWiFi <<FreeRTOS Task>> {
      .. Conecta ao WiFi ..
    }

    note right of MqttManager
     Gerencia conexão MQTT.
     Publica dados dos sensores.
     Recebe comandos (atualiza TargetDataManager).
     Executa em Task dedicada.
    end note
}

package "sensors" <<Hardware Interface>> {
    class SensorManager {
        - dhtSensor : unique_ptr<DHT> <<RAII>>
        - sensorDataMutex : FreeRTOSMutex <<RAII>>
        - readTaskHandle : TaskHandle_t <<FreeRTOS>>
        ---
        + SensorManager(SensorConfig, DisplayManager*, MqttManager*)
        + ~SensorManager()
        + initialize() : bool
        + startSensorTask() : bool
        + getTemperature() : float
        + getHumidity() : float
        + getSoilHumidity() : float
        + getVpd() : float
        {static} - readSensorsTaskWrapper(void*) <<Task Entry>>
    }
     note right of SensorManager
      Lê Sensores (DHT, Solo), calcula VPD.
      Cache Thread-safe (via FreeRTOSMutex).
      Publica via MqttManager (opcional).
      Atualiza DisplayManager (opcional).
      Executa em Task dedicada.
      Usa RAII para DHT e Mutex.
     end note
}

package "actuators" <<Hardware Interface>> {
    class ActuatorManager {
        - lightTaskHandle : TaskHandle_t <<FreeRTOS>>
        - humidityTaskHandle : TaskHandle_t <<FreeRTOS>>
        ---
        + ActuatorManager(GPIOControlConfig, TargetDataManager, SensorManager)
        + ~ActuatorManager()
        + initialize() : bool
        + startControlTasks() : bool
        {static} - lightControlTaskWrapper(void*) <<Task Entry>>
        {static} - humidityControlTaskWrapper(void*) <<Task Entry>>
    }
     note left of ActuatorManager
      Controla atuadores (Luz, Umidificador).
      Usa dados de TargetDataManager e SensorManager.
      Usa TimeService para controle de Luz.
      Executa em Tasks dedicadas.
     end note
}

package "ui" <<Hardware Interface>> {
    class DisplayManager {
        - lcd : unique_ptr<LiquidCrystal_I2C> <<RAII>>
        - lcdMutex : FreeRTOSMutex <<RAII>>
        ---
        + DisplayManager(i2c_addr, cols, rows)
        + ~DisplayManager()
        + initialize() : bool
        + printLine(line, format, ...)
        + showSensorData(...)
        + updateSpinner()
         ' ... outros show...() ...
    }
    note left of DisplayManager
     Gerencia Display LCD I2C.
     Thread-safe (via FreeRTOSMutex).
     Usa RAII para LCD e Mutex.
     Atualizado por SensorManager
     e outras partes (WiFi, etc).
    end note
}

package "utils" <<Utilities>> {
    class FreeRTOSMutex <<RAII>> {
     + FreeRTOSMutex()
     + ~FreeRTOSMutex()
     + get() : SemaphoreHandle_t
    }
    entity TimeService <<Utility>> {
     + initializeTimeService(TimeConfig) : bool
     + getCurrentTime(struct tm&) : bool
    }
     entity Logger <<Utility>> {
      {static} + info(format, ...)
      {static} + error(format, ...)
      ' ... outros níveis ...
     }
}


' --- Relações Principais entre Componentes ---

main *-- AppConfig : contains
main *-- TargetDataManager : creates/holds
main *-- DisplayManager : creates/holds
main *-- MqttManager : creates/holds

main ..> connectToWiFi : starts task >
main ..> SensorManager : initializes >
main ..> ActuatorManager : initializes >
main ..> TimeService : uses >

MqttManager o-- MQTTConfig : uses config >
MqttManager o-- TargetDataManager : updates >
MqttManager ..> PubSubClient : uses lib
MqttManager ..> ArduinoJson : uses lib

SensorManager *-- "unique_ptr<DHT>" : manages
SensorManager *-- FreeRTOSMutex : manages
SensorManager o-- SensorConfig : uses config >
SensorManager o..> DisplayManager : updates (optional) >
SensorManager o..> MqttManager : publishes (optional) >

ActuatorManager o-- GPIOControlConfig : uses config >
ActuatorManager o-- TargetDataManager : reads targets >
ActuatorManager o-- SensorManager : reads sensors >
ActuatorManager ..> TimeService : uses time >

DisplayManager *-- "unique_ptr<LiquidCrystal_I2C>" : manages
DisplayManager *-- FreeRTOSMutex : manages
DisplayManager ..> TimeService : uses time >

connectToWiFi ..> WiFiConfig : uses config >
connectToWiFi ..> DisplayManager : updates display >


' --- Notas sobre Tasks ---
note "Tasks FreeRTOS são criadas pelos Managers:\n- MqttManager: 1 task (conexão/loop)\n- SensorManager: 1 task (leitura/cache)\n- ActuatorManager: 2 tasks (luz, umidade)\n- WiFi: 1 task (conexão inicial)" as TaskNote
MqttManager .. TaskNote
SensorManager .. TaskNote
ActuatorManager .. TaskNote
connectToWiFi .. TaskNote

@enduml